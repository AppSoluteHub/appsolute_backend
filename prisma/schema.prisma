
datasource db {
  provider = "postgresql" // 
  url      = env("DATABASE_URL") 
}

generator client {
  provider = "prisma-client-js"
}
model User {
  id               String       @id @default(uuid())
  fullName         String
  email            String       @unique
  password         String
  profileImage     String?
  role             Role         @default(GUEST)
  posts            Post[]       @relation("UserPosts")
  comments         Comment[]    @relation("UserComments")
  likes            Like[]       @relation("UserLikes")
  subscribers      Subscriber[] @relation("UserSubscribers")
  followers        Subscriber[] @relation("FollowerSubscriber")  
  leaderboard      Leaderboard[]
  behavioralData   UserBehavior[]
  resetToken       String?      
  resetTokenExpires DateTime?
}

model Post {
  id           String       @id @default(uuid())
  title        String
  imageUrl     String?
  description  String?
  authorId     String
  contributors String?
  author       User         @relation("UserPosts", fields: [authorId], references: [id])
  category     PostCategory @default(TECHNOLOGY)
  isPublished  Boolean      @default(false)
  comments     Comment[]    @relation("PostComments")
  likes        Like[]       @relation("PostLikes")
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}



model Comment {
  id        String   @id @default(uuid())
  body      String
  authorId  String
  postId    String
  author    User     @relation("UserComments", fields: [authorId], references: [id])
  post      Post     @relation("PostComments", fields: [postId], references: [id])
  createdAt DateTime @default(now())
}

model Like {
  id        String   @id @default(uuid())
  userId    String
  postId    String
  user      User     @relation("UserLikes", fields: [userId], references: [id])
  post      Post     @relation("PostLikes", fields: [postId], references: [id])
  createdAt DateTime @default(now())
  @@unique([userId, postId]) 
}

model Content {
  id          String @id @default(uuid())
  contentUrl        String
  description  String
  category   String 
}

model Subscriber {
  id         String @id @default(uuid())
  userId     String
  user       User   @relation("UserSubscribers", fields: [userId], references: [id])
  followerId String
  follower   User   @relation("FollowerSubscriber", fields: [followerId], references: [id])
}

model Leaderboard {
  id        String   @id @default(uuid())
  rank      Int
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  score     Int
  answered  Int      @default(0)
  joined    DateTime @default(now())
}

model UserBehavior {
  id           String       @id @default(uuid())
  userId       String
  user         User         @relation(fields: [userId], references: [id])
  postCategory PostCategory
  interaction  InteractionType
  timestamp    DateTime      @default(now())
}

enum Role {
  ADMIN
  GUEST
}

enum PostCategory {
  AI
  TECHNOLOGY
  MARKETING
  DESIGN
  SOFTWARE
}

enum InteractionType {
  VIEW
  CLICK
  LIKE
  SHARE
  COMMENT
}
