generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String         @id @default(uuid())
  fullName          String
  nickName          String?
  country           String?
  phone             String?
  gender            String?
  email             String         @unique
  password          String
  profileImage      String?
  role              Role           @default(GUEST)
  resetToken        String?
  verified        Boolean  @default(false) 
  resetTokenExpires DateTime?
  totalScore        Int            @default(0)
  answered          Int?           @default(0)
  comments          Comment[]      @relation("UserComments")
  contributors      Contributor[]  @relation("UserContributors")
  likes             Like[]         @relation("UserLikes")
   unlikes           Unlike[]       @relation("UserunLikes")
  posts             Post[]         @relation("UserPosts")
  behavioralData    UserBehavior[]
  userTasks         UserTask[]
  joined             DateTime?    @default(now())
  updatedAt             DateTime?    @default(now())

}



model Task {
  id         String     @id @default(uuid())
  title      String
  url        String
  imageUrl   String?
  description String?
  points        Int      @default(5)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  userTasks  UserTask[]
  questions  Question[]
  tags             TaskTag[]     // many-to-many with Tag
  categories       TaskCategory[] // many-to-many with Category
}


model Question {
 id             Int         @id @default(autoincrement())
  taskId         String
  questionText   String
  options        String[]    
  correctAnswer  String

  task           Task        @relation(fields: [taskId], references: [id], onDelete: Cascade)
  userTasks      UserTask[]  
}


model UserTask {
  id          String   @id @default(uuid())
  userId      String
  taskId      String
  questionId  Int  
  userAnswer  String
  isCorrect   Boolean  @default(false)
  scoreEarned Int      @default(0)
  answeredAt  DateTime @default(now())

  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([userId, taskId, questionId]) // Ensure a user can answer each question only once
}



model Post {
  id               String        @id @default(uuid())
  title            String
  imageUrl         String?
  description      String?
  authorId         String
  contributors     String[]
  editorRole       String?
  isPublished      Boolean       @default(false)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  comments         Comment[]     @relation("PostComments")
  contributorsList Contributor[] @relation("PostContributors")
  likes            Like[]        @relation("PostLikes")
  unlikes            Unlike[]        @relation("PostunLikes")
  author           User          @relation("UserPosts", fields: [authorId], references: [id])
  tags             PostTag[]     // many-to-many with Tag
  categories       PostCategoryLink[] // many-to-many with Category
}

model Contributor {
  id     String @id @default(uuid())
  userId String
  postId String
  post   Post   @relation("PostContributors", fields: [postId], references: [id])
  user   User   @relation("UserContributors", fields: [userId], references: [id])

  @@unique([postId, userId])
}


model Comment {
  id        String   @id @default(uuid())
  body      String
  authorId  String
  postId    String
  createdAt DateTime @default(now())
  
  parentId  String?  
  replies   Comment[] @relation("CommentReplies") 
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  author    User     @relation("UserComments", fields: [authorId], references: [id])
  post      Post     @relation("PostComments", fields: [postId], references: [id])
  likes     Like[]   @relation("CommentLikes") // Likes on this comment
   unlikes   Unlike[]   @relation("CommentunLikes") 
}

model Like {
  id        String   @id @default(uuid())
  userId    String
  postId    String?
  commentId String?  
  createdAt DateTime @default(now())
  post      Post?    @relation("PostLikes", fields: [postId], references: [id])
  user      User     @relation("UserLikes", fields: [userId], references: [id])
  comment   Comment? @relation("CommentLikes", fields: [commentId], references: [id])
  @@unique([userId, commentId]) 
  @@unique([userId, postId])  
}
model Unlike {
  id        String   @id @default(uuid())
  userId    String
  postId    String?
  commentId String?  
  createdAt DateTime @default(now())

  post      Post?    @relation("PostunLikes", fields: [postId], references: [id])
  user      User     @relation("UserunLikes", fields: [userId], references: [id])
  comment   Comment? @relation("CommentunLikes", fields: [commentId], references: [id])

  @@unique([userId, commentId]) 
  @@unique([userId, postId])  
}

model Content {
  id          String @id @default(uuid())
  contentUrl  String
  description String
  category    String
}

model Subscriber {
  id    String @id @default(uuid())
  email String @unique
}

model UserBehavior {
  id           String          @id @default(uuid())
  userId       String
  interaction  InteractionType
  metadata     Json? 
  timestamp    DateTime        @default(now())
  user         User            @relation(fields: [userId], references: [id])
}

enum Role {
  ADMIN
  GUEST
  SUPERADMIN
  EDITOR
  CONTRIBUTOR
  
}

enum InteractionType {
  VIEW
  CLICK
  LIKE
  SHARE
  COMMENT
}


model Tag {
  id     String     @id @default(uuid())
  name   String @unique
  posts  PostTag[]
  tasks  TaskTag[]
  createdAt  DateTime @default(now())
}

model Category {
  id     String         @id @default(uuid())
  name   String @unique
  posts  PostCategoryLink[]
  tasks  TaskCategory[]
  createdAt DateTime @default(now())
}

model PostTag {
  id      String @id @default(uuid())
  postId  String
  tagId   String

  post    Post   @relation(fields: [postId], references: [id])
  tag     Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([postId, tagId])
}

model TaskTag {
  id      String @id @default(uuid())
  taskId  String
  tagId   String

  task    Task   @relation(fields: [taskId], references: [id])
  tag     Tag    @relation(fields: [tagId], references: [id])

  @@unique([taskId, tagId])
}

model PostCategoryLink {
  id         String @id @default(uuid())
  postId     String
  categoryId String

  post       Post     @relation(fields: [postId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])

  @@unique([postId, categoryId])
}

model TaskCategory {
  id          String @id @default(uuid())
  taskId      String
  categoryId  String

  task        Task     @relation(fields: [taskId], references: [id])
  category    Category @relation(fields: [categoryId], references: [id])

  @@unique([taskId, categoryId])
}